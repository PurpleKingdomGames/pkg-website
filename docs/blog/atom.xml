<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://purplekingdomgames.com//blog</id>
    <title>Purple Kingdom Games Blog</title>
    <updated>2025-07-29T06:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://purplekingdomgames.com//blog"/>
    <subtitle>The best place to stay up-to-date with the latest Purple Kingdom Games news and events.</subtitle>
    <logo>https://purplekingdomgames.com//img/pk-small.svg</logo>
    <rights>Copyright Â© 2025 Purple Kingdom Games Ltd.</rights>
    <entry>
        <title type="html"><![CDATA[Example Driven Documentation]]></title>
        <id>https://purplekingdomgames.com//blog/2025/07/29/example-driven-documentation.html</id>
        <link href="https://purplekingdomgames.com//blog/2025/07/29/example-driven-documentation.html"/>
        <updated>2025-07-29T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="/img/blog/example_driven_docs.png" alt="Example Driven Documentation"></p>
<p>Providing documentation for open source projects is a necessary support activity for any library author, but it comes with a heavy maintenance cost, particularly for large projects.</p>
<p>In my experience, a team of one or two developers cannot sustain the maintenance of documentation for even one large library or framework, let alone two or three or four, as we do today.</p>
<p>My goal with this post is to share an idea with our fellow open source library maintainers, a notion I've come to think of as 'Example Driven Documentation'. There will be a lot of references to the implementation of this idea that we now use via an open source internal tool called '<a href="https://github.com/PurpleKingdomGames/purpledoc">Purpledoc</a>', but it's the idea that I want to offer up for consideration.</p>
<p>People typically write documentation containing code examples, but what are the maintenance implications of flipping that around, and having code examples that happen to contain documentation?</p>
]]></summary>
        <author>
            <name>Dave Smith</name>
            <uri>https://mastodon.gamedev.place/@davesmith00000</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Let's build Snake!]]></title>
        <id>https://purplekingdomgames.com//blog/2024/03/18/lets-build-snake.html</id>
        <link href="https://purplekingdomgames.com//blog/2024/03/18/lets-build-snake.html"/>
        <updated>2024-03-18T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=YJtG5E_a9sw"><img src="/img/blog/snake_youtube_thumbnail.png" alt="Let's build Snake"></a></p>
<p>In this video tutorial, we'll build a version of the classic game 'Snake!', from scratch.</p>
]]></summary>
        <author>
            <name>Dave Smith</name>
            <uri>https://mastodon.gamedev.place/@davesmith00000</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Deriving the Elm Architecture]]></title>
        <id>https://purplekingdomgames.com//blog/2024/03/05/deriving-the-elm-architecture.html</id>
        <link href="https://purplekingdomgames.com//blog/2024/03/05/deriving-the-elm-architecture.html"/>
        <updated>2024-03-05T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="/img/blog/decoding_a_tree.jpeg" alt="Deriving the Elm Architecture"></p>
<p>Indigo and Tyrian are both based on flavours of the Elm architecture; But why that architecture pattern, and how does it work?</p>
<p>In this post, we define some desired principles of how we'd like to program a Graphical User Interface (GUI), and watch the Elm architecture's API inevitably emerge.</p>
]]></summary>
        <author>
            <name>Dave Smith</name>
            <uri>https://mastodon.gamedev.place/@davesmith00000</uri>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Loveable Scala Rogues]]></title>
        <id>https://purplekingdomgames.com//blog/2024/02/03/loveable-scala-rogues.html</id>
        <link href="https://purplekingdomgames.com//blog/2024/02/03/loveable-scala-rogues.html"/>
        <updated>2024-02-03T06:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p><img src="/img/blog/lighting_layout.png" alt="'Hoplike', a little game I made for the 'Lovable Scala Rogues' talk."></p>
<p>It's 2024! Yes, I know we're well into Feburary by now... but did you make any new years resolutions?</p>
<p>One of my resolutions from <em>last</em> year, was to work up the nerve to do another Scala meet-up talk on <a href="https://indigoengine.io/">Indigo</a>. The last time I did one (<a href="https://www.youtube.com/watch?v=SmZETGZKCVU"><strong>'Functional Game Programming'</strong></a>) was in the heady days of pre-pandemic 2020, and a lot has happened since then, both in terms of Indigo's development, and the Scala community in general.</p>
]]></summary>
        <author>
            <name>Dave Smith</name>
            <uri>https://mastodon.gamedev.place/@davesmith00000</uri>
        </author>
    </entry>
</feed>